// Copyright (c) .NET Foundation. All rights reserved.
// Licensed under the Apache License, Version 2.0. See License.txt in the project root for license information.

using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using NuGet.Protocol.Core.Types;

namespace NuGet.Protocol
{
    public class VulnerabilityInfoResourceProvider : ResourceProvider
    {
        public VulnerabilityInfoResourceProvider()
           : base(typeof(VulnerabilityInfoResource),
                 nameof(VulnerabilityInfoResource),
                 NuGetResourceProviderPositions.Last)
        {
        }

        public override async Task<Tuple<bool, INuGetResource>> TryCreate(SourceRepository source, CancellationToken token)
        {
            VulnerabilityInfoResource resource = null;
            if (source.PackageSource.IsHttp)
            {
                var serviceIndex = await source.GetResourceAsync<ServiceIndexResourceV3>(token);
                if (serviceIndex != null)
                {
                    var serviceEntry = serviceIndex.GetServiceEntries(ServiceTypes.VulnerabilityInfo).FirstOrDefault();

                    if (serviceEntry != null)
                    {
                        resource = await GetVulnerabilityInfoResourceAsync(source, serviceEntry, token);
                    }
                }
            }

            return new Tuple<bool, INuGetResource>(resource != null, resource);
        }

        private async Task<VulnerabilityInfoResource> GetVulnerabilityInfoResourceAsync(
            SourceRepository source,
            ServiceIndexEntry serviceEntry,
            CancellationToken token)
        {
            var httpSourceResource = await source.GetResourceAsync<HttpSourceResource>(token);
            var client = httpSourceResource.HttpSource;

            return new VulnerabilityInfoResource(client, serviceEntry);
        }
    }
}
